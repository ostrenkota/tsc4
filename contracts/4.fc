{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice s = text.begin_parse();
  s~skip_bits(32);
  return caesar_cipher(shift, s, -1);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift = -1 * shift + 26;
  slice s = text.begin_parse();
  s~skip_bits(32);
  return caesar_cipher(shift, s, -1);
}

(cell) caesar_cipher(int shift, slice s, int init) {
  builder b = begin_cell();
  if (init) {
    b~store_uint(0, 32);
  }

  while (~ s.slice_data_empty?()) {
      int symbol = s~load_uint(8);

      if ((symbol >= 65) & (symbol <= 90)) {
          symbol = ((symbol - 65 + shift) % 26) + 65;
      } elseif ((symbol >= 97) & (symbol <= 122)) {
          symbol = ((symbol - 97 + shift) % 26) + 97;
      }

      b~store_uint(symbol, 8);
  }

  if (~ s.slice_refs_empty?()) {
    cell child = caesar_cipher(shift, s~load_ref().begin_parse(), 0);
    return b.store_ref(child).end_cell();
  }

  return b.end_cell();
}
